!function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):jQuery&&!jQuery.fn.hoverIntent&&e(jQuery)}(function(e){"use strict";var t,n,o={interval:100,sensitivity:6,timeout:0},a=0,s=function(e){t=e.pageX,n=e.pageY},r=function(e,o,a,i){return Math.sqrt((a.pX-t)*(a.pX-t)+(a.pY-n)*(a.pY-n))<i.sensitivity?(o.off(a.event,s),delete a.timeoutId,a.isActive=!0,e.pageX=t,e.pageY=n,delete a.pX,delete a.pY,i.over.apply(o[0],[e])):(a.pX=t,a.pY=n,a.timeoutId=setTimeout(function(){r(e,o,a,i)},i.interval),void 0)},i=function(e,t,n,o){return delete t.data("hoverIntent")[n.id],o.apply(t[0],[e])};e.fn.hoverIntent=function(t,n,l){var d=a++,u=e.extend({},o);e.isPlainObject(t)?(u=e.extend(u,t),e.isFunction(u.out)||(u.out=u.over)):u=e.isFunction(n)?e.extend(u,{over:t,out:n,selector:l}):e.extend(u,{over:t,out:t,selector:n});var c=function(t){var n=e.extend({},t),o=e(this),a=o.data("hoverIntent");a||o.data("hoverIntent",a={});var l=a[d];l||(a[d]=l={id:d}),l.timeoutId&&(l.timeoutId=clearTimeout(l.timeoutId));var c=l.event="mousemove.hoverIntent.hoverIntent"+d;if("mouseenter"===t.type){if(l.isActive)return;l.pX=n.pageX,l.pY=n.pageY,o.off(c,s).on(c,s),l.timeoutId=setTimeout(function(){r(n,o,l,u)},u.interval)}else{if(!l.isActive)return;o.off(c,s),l.timeoutId=setTimeout(function(){i(n,o,l,u.out)},u.timeout)}};return this.on({"mouseenter.hoverIntent":c,"mouseleave.hoverIntent":c},u.selector)}}),jQuery(document).ready(function(e){function t(e){e=(e||navigator.userAgent).toLowerCase();var t=e.match(/android\s([0-9\.]*)/);return!!t&&t[1]}function n(){var t=e(".fs-network-menu.desktop").width(),n=e(".fs-network-menu.desktop > li"),o=0;e.each(n,function(n,a){var s=e(a);o+=s.width(),o<=t?s.removeClass("network-item-hide").addClass("network-item-show"):s.removeClass("network-item-show").addClass("network-item-hide")})}function o(e){e.siblings().removeClass("open"),e.addClass("open"),a(e)}function a(t){if(e(t).hasClass("loading")||e(t).hasClass("loaded"))return!1;if(e(t).hasClass("feed-dropdown")){var n=[];e(".primary .column",t).each(function(){var t=e(this).data("feed"),o={feed:t,layout:e(this).data("layout")};n.push(o)});s(n,t);return!1}}function s(t,n){var o=encodeURIComponent(JSON.stringify(t)),a=siteData.resturl+"menus/network-nav/dropdown/?columns="+o;e.ajax({url:a,type:"GET",beforeSend:function(t){t.setRequestHeader("x-fsapi-nonce",siteData.nonce),e(n).addClass("loading"),e(".primary .column").append('<span class="loader" />')},success:function(t){e(".loader").remove(),e(".primary .column",n).each(function(o){e(this).prepend(t[o]),e(n).addClass("loaded"),e(n).removeClass("loading")});var o=e(".trending .column");if(o.length>0){var a=o.find("ul"),s=a.find("li"),r=s.width(),i=s.length,l=10,d=parseInt(s.css("margin-right").replace("px",""))+l,u=(r+d)*i-d;a.width(u)}},error:function(e){console.log(e)}})}function r(){var t=e("body");t.width()<600&&t.on("click",".fs-utility-link",function(t){var n=e(this),o=n.parent(),a=o.data("feed")||"",s=o.data("group")||"",r=o.data("links")||"";"link"!==o.data("type")&&(t.preventDefault(),!1!==o.data("loaded")&&void 0!=o.data("loaded")||o.hasClass("loading")||(o.addClass("loading"),o.find(".fs-utility-api-nav-toggle").addClass("open"),i(o,a,s,r)),!0===o.data("loaded")&&(o.find(".fs-utility-nav-content").stop().slideToggle(500),o.find(".fs-utility-api-nav-toggle").toggleClass("open")))})}function i(t,n,o,a){var s=encodeURIComponent(JSON.stringify(a)),r=encodeURIComponent(JSON.stringify(n)),i=encodeURIComponent(JSON.stringify(o)),l=siteData.resturl+"menus/network-nav/mobile/?subcontent="+r+"&group="+i+"&links="+s;e.ajax({url:l,type:"GET",beforeSend:function(e){e.setRequestHeader("x-fsapi-nonce",siteData.nonce),t.append('<span class="loader" />')},success:function(n){console.log(n),e(".loader").remove(),t.removeClass("loading"),t.append(n),t.data("loaded",!0),t.attr("data-loaded",!0),t.data("toggle","open"),t.attr("data-toggle","open"),e(t).find(".fs-utility-nav-content").fadeIn("fast")},error:function(e){t.append("<p>No data could be loaded</p>")}})}e(".fs-network-util-toggle").click(function(){e("body").toggleClass("fs-util-nav-open"),e(".fs-network-util").toggleClass("is-open"),e(".fs-network-util-toggle").toggleClass("open")}),e(".fs-network-social-toggle").click(function(){e(".fs-network-social").toggleClass("is-open"),e(".fs-network-social-toggle").toggleClass("open")}),e(".fs-network-search-toggle").click(function(){e("#fs-network-search").toggleClass("open"),e("#fs-network-menu").toggleClass("search-visible")});var l=t();if(l=parseInt(l,10),l<5&&(e(".fs-network-search-toggle").remove(),e(".fs-network-util-toggle").remove(),e(".fs-network-util").remove()),n(),e(window).resize(n),r(),e("html").hasClass("touch"))e(".fs-network-menu li.dropdown > a").on("click",function(t){t.preventDefault();var n=e(this).parent();o(n)});else{var d=e(".fs-network-menu li.dropdown > a"),u=e(".loader");d.on("click",function(e){e.preventDefault()});var c=function(){var t=e(this);o(t)},f=function(){e(".fs-network-menu li.dropdown").removeClass("open"),u.length>0&&u.remove()};e(".fs-network-menu").hoverIntent({over:c,out:f,timeout:200,selector:"li.dropdown"})}}),jQuery(window).scroll(function(){jQuery(window).scrollTop()>147?(jQuery("#fs-network-nav").addClass("scrolled"),jQuery("body").addClass("fs-network-nav-scrolled")):(jQuery("#fs-network-nav").removeClass("scrolled"),jQuery("body").removeClass("fs-network-nav-scrolled")),jQuery(window).width()>767&&jQuery("body").hasClass("single-post")&&(jQuery(window).scrollTop()>147?jQuery("#fs-network-nav").addClass("flipcard"):jQuery("#fs-network-nav").removeClass("flipcard"))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
